plugins {
    id "application"
    id "java"
    id "eclipse"
    id "idea"
    id "jacoco"
}

apply from: "https://raw.githubusercontent.com/kryptnostic/gradles/master/mavenRepos.gradle"

// Set to the title for your Entity Set
description = "Sample OpenFlights Airport Data"
group = "com.kryptnostic"
version = 'v0.0.1'

mainClassName = "com.dataloom.integrations.dataintegration.DataIntegration"
applicationDefaultJvmArgs = ["-Xmx8G", "-Xms8G", "-server"]
sourceCompatibility = JavaVersion.VERSION_1_8
targetCompatibility = JavaVersion.VERSION_1_8

// Change to name of your csv file and integration account login credentials
run.args = ["airports.csv","test@example.com","examplepassword"]

configurations {
    provided
}

configurations.all {
    exclude module: 'slf4j-log4j12'
}

sourceSets {
    main.compileClasspath += configurations.provided
    test.compileClasspath += configurations.provided
    test.runtimeClasspath += configurations.provided
}

dependencies {
    compile 'com.kryptnostic:shuttle:0.1.6-SNAPSHOT'
    compile fileTree(dir: "lib/", include: "*.jar")

    /*
     * TESTING
     */
    testCompile "junit:junit:4.12"
    testCompile "org.mockito:mockito-core:2.2.7";
}

eclipse {
    ext.downloadSources = true
    ext.downloadJavadoc = true

    ext.sourceCompatibility = JavaVersion.VERSION_1_8
    ext.targetCompatibility = JavaVersion.VERSION_1_8
}

eclipse.classpath.plusConfigurations += [configurations.provided]

//Work around for: https://issues.gradle.org/browse/GRADLE-2992
task pathingJar(type: Jar) {
    appendix = 'pathing'
    manifest { attributes("Class-Path": configurations.runtime.collect { project.uri(it) }.join(' ') + ' ' + jar.archiveName ) }
}

applicationDistribution.from(pathingJar) { into "lib" }
startScripts {
    doLast {
        def winScriptFile  = file getWindowsScript()
        def winFileText = winScriptFile.text

        // Remove too-long-classpath and use pathing jar instead
        winFileText = winFileText.replaceAll('set CLASSPATH=.*', 'rem CLASSPATH declaration removed.')
        winFileText = winFileText.replaceAll('("%JAVA_EXE%" .* -classpath ")%CLASSPATH%(" .*)', '$1%APP_HOME%\\\\lib\\\\' + pathingJar.archiveName + '$2')

        winScriptFile.text = winFileText
    }
}
//end workaround

run {
    dependsOn pathingJar
    doFirst {
        classpath = files("$buildDir/classes/main", "$buildDir/resources/main", pathingJar.archivePath)
    }
}